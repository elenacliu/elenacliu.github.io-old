<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on cliu&#39;s Blog</title>
    <link>http://elenacliu.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on cliu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://elenacliu.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Parser</title>
      <link>http://elenacliu.github.io/post/2020-06-15-Parser/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://elenacliu.github.io/post/2020-06-15-Parser/</guid>
      <description>Parser 与表达式解析有关的题目多半要用栈或者递归来解决（我习惯用栈+迭代）。数据结构课程栈一章，中缀表达式求值算法可以供参考（核心在于两个栈，一个放操作数，一个放操作符） 这里列出了LC上关于解析的常见题目
LC726. 原子的数量 题目链接
方法1：栈+迭代 如果没有听说过中缀表达式求值的算法，推荐一看，对于本题的理解很有帮助。
还是那句话，写代码的前提要知道是我们自己遇到这个问题怎么解决。
对于给定字符串f，我们无非要做以下三件事：
提取元素名称atom 提取紧跟着的元素个数cnt 根据括号关系计算元素出现的总次数num 对上述第三点，如果我知道两个括号之间所有的元素和他们在括号内的个数，再乘以括号后紧跟着的数字，不就能够解决了吗？
我们设置两个容器，一个是括号栈parentheses_stack，用来匹配括号，另一个是一个元素信息列表element_info，用来记录字符串f中出现的元素的名称、当前个数、当前被几个括号包围（之所以不像中缀表达式求值那样设计两个栈，是因为在表达式求值的场景中，操作符有目数的限制，因此对放置操作数的容器只有末尾的pop和push操作，而且最后一定只有一个value做结果，因此用只栈放置操作数是可以的）
可能有人会疑惑为什么这里要记录某元素当前被几个括号包围，实际上正是通过这个数和括号栈（只放置了(括号）的中的括号个数的大小关系，判断元素信息列表中的哪些元素的个数在本轮中需要乘以括号后的数字（这也是我认为最比较巧妙的一个点）。
以K4(ON(SO3)2)2为例，演示过程：
代码 class Solution: def countOfAtoms(self, f: str) -&amp;gt; str: i = 0 n = len(f) element_info = list() # list of [element_name, number_of_element, number_of_parentheses] parentheses_stack = list() # atom = str() distribution = dict() while i &amp;lt; n: # 如果遇到的是字母 # 如果遇到的是大写字母 atom = str() if f[i].isupper(): atom = f[i] i += 1 # 跟着小写字母 while i &amp;lt; n and f[i].</description>
    </item>
    
    <item>
      <title>双指针</title>
      <link>http://elenacliu.github.io/post/2020-06-11-%E5%8F%8C%E6%8C%87%E9%92%88/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://elenacliu.github.io/post/2020-06-11-%E5%8F%8C%E6%8C%87%E9%92%88/</guid>
      <description>双指针 有以下几种情况：
首尾开始，向中间移动，直到两者相遇（这种情况数组通常是有序的） 都从头开始，同时向后移动，直到其中一个到达末尾 快慢指针算法（比如找链表的中点，倒数第N个点等等） 几个编程时要注意的问题：
移动指针时千万注意不要越界！不要越界！不要越界！在while条件部分的前面加上判断！ LC15. 三数之和 题目链接
这题要求是三数之和为0，且不能重复。
三数之和为0比较好办，先对数组进行排序，然后对下标i, j, k依次固定i，对数组后面的部分执行2sum算法即可。
不能重复怎么办？那就先看看什么情况下会发生重复。
清楚了这一点后本题就变得很简单了！
时间复杂度$O(n^2)$，空间复杂度$O(n)$
class Solution: def threeSum(self, nums: List[int]) -&amp;gt; List[List[int]]: nums.sort() # print(nums) N = len(nums) if N &amp;lt;= 2: return list(list()) i = 0 lst = list() while i &amp;lt; N - 2: j, k = i + 1, N - 1 # print(i) while j &amp;lt; k: if nums[j] + nums[k] &amp;gt; -nums[i]: k -= 1 elif nums[j] + nums[k] &amp;lt; -nums[i]: j += 1 else: # print(j, k) lst.</description>
    </item>
    
    <item>
      <title>单调栈</title>
      <link>http://elenacliu.github.io/post/2020-06-09-%E5%8D%95%E8%B0%83%E6%A0%88/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://elenacliu.github.io/post/2020-06-09-%E5%8D%95%E8%B0%83%E6%A0%88/</guid>
      <description>单调栈 单调栈，顾名思义，是栈中的元素满足一定的单调性。对于从栈底到栈顶单调减少的单调栈，在向栈顶push元素的时候，如果栈顶元素比该元素小，则直接push进去；如果栈顶元素比该元素大，则将栈顶元素pop出来，再比较新的栈顶元素与该元素的大小。实际上我们在使用单调栈的时候，很少直接存储数值，而是存储数组下标，C++代码如下：
stack&amp;lt;int&amp;gt; monotonestk; // insert the ith number of vector &amp;#39;nums&amp;#39; while(!monotonestk.empty() &amp;amp;&amp;amp; nums[monotonestk.top()] &amp;lt; nums[i])	// 单调递减的栈 monotonestk.pop(); monotonestk.push(i); 实际上在数据结构课堂上老师讲过用这个解决直方图最大矩形的问题，其中一个算法细节还在期中考试考过，但是当时理解并不深刻。
基础应用 从知乎专栏上看到这样一个问题，据说是该专栏作者在谷歌的模拟面试题（笔者想起了自己的Google面试经历，说难不难说简单也不简单，还是很考察算法功力的，当然自己有待提升的地方还有很多）：给定一个数组，请返回在这个数组中，每一个数往右边走几步可以到达比它大的第一个数，以数组的形式返回。如果右边没有比它大的数，则认为走-1步。
暴力的做法时间上是$O(n^2)$的，空间上除了保存输入数据以外的额外开销是$O(1)$。每次以第$i$个元素为起点，向右边找第一个大于它的数字，返回下标差。
但很明显我们在这个过程中做了重复计算。以第0个元素为起点时，其实我们遍历到了之后所有的元素（后面其实在不断做重复的遍历），怎么样把一次遍历得到的信息保存下来呢？“存”当然是用数据结构，但是怎么表达元素之间那种“相邻”的大小关系呢？（就比如说这题的，找到下一个比nums[i]大的数在哪里？）
单调栈可以为我们所用。我们需要找到每一个数右边第一个比它大的数字，联系一下单调栈的入栈方式：如果比栈顶小，直接入栈（这时入栈的nums[i]一定不是栈顶元素右边第一个比它大的数）；如果比栈顶大，则先将栈顶的元素pop出来，关键点就在这里，所有元素在出栈的那一刻不就找到了自己右边第一个比自己大的数了吗？
一个细节问题：是不是所有的元素都有出栈的时刻？显然不是。我记得上课时邓公提过一个问题，问我们算法执行完毕后单调栈中的内容是什么含义。当时想不明白，现在明白了：实际上就是在数组中，右边没有比它大的数的那些数的下标（很有点绕口啊）。因此对于无法从栈中弹出的元素，它们的答案就是-1。由于能弹出就可以更新而不能弹出则不能更新，在初始化时将所有元素的答案初始化为-1即可。
每一个位置只会入栈一次（在枚举到它时），并且最多出栈一次，因此时间复杂度为$O(n)$，另外开了一个栈，空间复杂度$O(n)$。
代码如下：
vector&amp;lt;int&amp;gt; getBiggerRight(vector&amp;lt;int&amp;gt;&amp;amp; nums) { vector&amp;lt;int&amp;gt; res(nums.size(), -1); stack&amp;lt;int&amp;gt; stk; for(int i = 0; i &amp;lt; nums.size(); i++) { while(!stk.empty() &amp;amp;&amp;amp; nums[stk.top()] &amp;lt; nums[i]) {	// 单调递减的栈 res[stk.top()] = i - stk.top(); stk.pop(); } stk.push(i); } return res; } 进阶1：LC84. 直方图最大矩形 先来说说一个trivial的思路（不是官方解答）。既然上面的方法可以求出右侧第一个比自己大的数，那么同样可以求出左、右侧第一个比自己小的数。</description>
    </item>
    
  </channel>
</rss>
